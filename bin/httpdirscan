#!/usr/bin/env ruby
# encoding: utf-8
#

require'combinatorics'
require'combos_permutedirs'

module Combinatorics::PermuteDirs
  require'pp'
  require'uri'
  require'singleton'
  require'net/http'

  DEBUG = false

  class HttpDirScan 
    attr_reader :hturi, :dname, :hdirs, :depth, :dsize, :level

    def initialize(anurl = '', acorr = 0)
      raise(RuntimeError, 'URL argument cannot be blank!') if anurl.blank?

      begin
        @hturi = URI(anurl)
        @dname = @hturi.path
        @hdirs = @dname.split('/')
        @level = @depth = @hdirs.size
        @dsize = acorr
        @depth -= 1

        raise(RuntimeException, 'level attribute value less than anarr size!') if @level < @dsize

        STDERR.puts "dsize: #{@dsize}\n" if DEBUG
        STDERR.puts "level: #{@level}\n" if DEBUG

        for k in @dsize .. @level
          anurl.choose_path(k, ['a','b']) do |a|
            STDOUT.puts(a.join('/'))
          end
        end
      rescue Exception => e
        STDERR.puts(e.backtrace.join(' '))
        STDERR.puts(e.inspect)
      end

      true
    end
  end
end

include Combinatorics::PermuteDirs

HttpDirScan.new(ARGV.first, ARGV.last.to_i) if !ARGV.blank? and ARGV.size > 0

exit 0
